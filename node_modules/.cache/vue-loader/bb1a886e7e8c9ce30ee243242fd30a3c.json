{"remainingRequest":"/var/www/provider-stg.hera.health/node_modules/vue-loader/lib/index.js??vue-loader-options!/var/www/provider-stg.hera.health/src/views/admin/ClinicApplicants.vue?vue&type=script&lang=js&","dependencies":[{"path":"/var/www/provider-stg.hera.health/src/views/admin/ClinicApplicants.vue","mtime":1595239653580},{"path":"/var/www/provider-stg.hera.health/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/var/www/provider-stg.hera.health/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/var/www/provider-stg.hera.health/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/var/www/provider-stg.hera.health/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/var/www/provider-stg.hera.health/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCB7bWFwR2V0dGVyc30gZnJvbSAndnVleCcKCmltcG9ydCBDb25zdCBmcm9tICIuLy4uLy4uL3V0aWxzL2NvbnN0IgppbXBvcnQgcmYgZnJvbSAiLi4vLi4vYXBpL1JlcXVlc3RGYWN0b3J5IgppbXBvcnQgUGFnaW5hdGlvbiBmcm9tICIuLi8uLi9jb21tb24vUGFnaW5hdGlvbiIKaW1wb3J0IEFkbWluQ2xpbmljTGlzdGluZyBmcm9tICcuLi8uLi9jb21wb25lbnRzL0FkbWluQ2xpbmljTGlzdGluZycKCmV4cG9ydCBkZWZhdWx0IHsKICBjb21wb25lbnRzOiB7CiAgICBQYWdpbmF0aW9uLAogICAgQWRtaW5DbGluaWNMaXN0aW5nCiAgfSwKICBkYXRhKCkgewogICAgcmV0dXJuIHsKICAgICAgQ29uc3QsCiAgICAgIGNsaW5pY3M6IFtdLAogICAgICBjdXJyZW50UGFnZTogMSwKICAgICAgc29ydENyZWF0ZWQ6ICdkZXNjJywKICAgICAgbmFtZTogJycsCiAgICAgIHRvdGFsUGFnZTogMSwKICAgIH0KICB9LAogIGNvbXB1dGVkOiB7CiAgICAuLi5tYXBHZXR0ZXJzKFsnY291bnRyaWVzJywgJ2FwcHRfdHlwZXMnLCAnYXBwdF9zdGF0dXMnXSkKICB9LAogIG1ldGhvZHM6IHsKICAgIGdldENsaW5pY0FwcGxpY2FudHMocGFnZSkgewogICAgICB0aGlzLmN1cnJlbnRQYWdlID0gcGFnZTsKICAgICAgbGV0IHBhcmFtcyA9IHsKICAgICAgICBwYWdlOiBwYWdlCiAgICAgIH07CiAgICAgIHJmLmdldFJlcXVlc3QoJ0FkbWluUmVxdWVzdCcpLmdldENsaW5pY0FwcGxpY2FudHMocGFyYW1zKS50aGVuKChyZXMpID0+IHsKICAgICAgICB0aGlzLmNsaW5pY3MgPSByZXMuZGF0YS5kYXRhczsKICAgICAgICB0aGlzLnRvdGFsUGFnZSA9IHJlcy5kYXRhLnRvdGFsX3BhZ2U7CiAgICAgIH0pOwogICAgfSwKICAgIG9uU29ydENyZWF0ZWQoKSB7CiAgICAgIHRoaXMuZ2V0Q2xpbmljQXBwbGljYW50cygxKTsKICAgIH0KICB9LAoKICBtb3VudGVkKCkgewogICAgbGV0IHNlbGYgPSB0aGlzCgogICAgc2VsZi4kc3RvcmUuZGlzcGF0Y2goJ2dldENvdW50cmllcycpCiAgICBzZWxmLiRzdG9yZS5kaXNwYXRjaCgnZ2V0QXBwb2ludG1lbnRNZXRhcycpCiAgICBzZWxmLmdldENsaW5pY0FwcGxpY2FudHModGhpcy5jdXJyZW50UGFnZSk7CiAgfQp9Cg=="},{"version":3,"sources":["ClinicApplicants.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAgBA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"ClinicApplicants.vue","sourceRoot":"src/views/admin","sourcesContent":["<template>\n  <div>\n    <p class=\"title title-22\">Clinic Applicants</p>\n\n    <div class=\"row list-content\">\n      <AdminClinicListing :clinics=\"clinics\" @onRefresh=\"getClinicApplicants(currentPage)\"></AdminClinicListing>\n    </div>\n\n    <div class=\"page\">\n      <Pagination :current-page=\"currentPage\" :total-page=\"totalPage\"\n                  @pageData=\"getClinicApplicants\"></Pagination>\n    </div>\n  </div>\n</template>\n\n<script>\n  import {mapGetters} from 'vuex'\n\n  import Const from \"./../../utils/const\"\n  import rf from \"../../api/RequestFactory\"\n  import Pagination from \"../../common/Pagination\"\n  import AdminClinicListing from '../../components/AdminClinicListing'\n\n  export default {\n    components: {\n      Pagination,\n      AdminClinicListing\n    },\n    data() {\n      return {\n        Const,\n        clinics: [],\n        currentPage: 1,\n        sortCreated: 'desc',\n        name: '',\n        totalPage: 1,\n      }\n    },\n    computed: {\n      ...mapGetters(['countries', 'appt_types', 'appt_status'])\n    },\n    methods: {\n      getClinicApplicants(page) {\n        this.currentPage = page;\n        let params = {\n          page: page\n        };\n        rf.getRequest('AdminRequest').getClinicApplicants(params).then((res) => {\n          this.clinics = res.data.datas;\n          this.totalPage = res.data.total_page;\n        });\n      },\n      onSortCreated() {\n        this.getClinicApplicants(1);\n      }\n    },\n\n    mounted() {\n      let self = this\n\n      self.$store.dispatch('getCountries')\n      self.$store.dispatch('getAppointmentMetas')\n      self.getClinicApplicants(this.currentPage);\n    }\n  }\n</script>\n"]}]}