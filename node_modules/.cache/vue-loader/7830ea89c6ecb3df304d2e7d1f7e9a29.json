{"remainingRequest":"/var/www/provider-stg.hera.health/node_modules/vue-loader/lib/index.js??vue-loader-options!/var/www/provider-stg.hera.health/src/views/clients/Reviews.vue?vue&type=script&lang=js&","dependencies":[{"path":"/var/www/provider-stg.hera.health/src/views/clients/Reviews.vue","mtime":1590709568409},{"path":"/var/www/provider-stg.hera.health/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/var/www/provider-stg.hera.health/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/var/www/provider-stg.hera.health/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCByZiBmcm9tICIuLi8uLi9hcGkvUmVxdWVzdEZhY3RvcnkiOwppbXBvcnQgUGFnaW5hdGlvbiBmcm9tICIuLi8uLi9jb21tb24vUGFnaW5hdGlvbiI7CgpleHBvcnQgZGVmYXVsdCB7CiAgbmFtZTogIlJldmlldyIsCiAgY29tcG9uZW50czogewogICAgUGFnaW5hdGlvbgogIH0sCiAgZGF0YSgpIHsKICAgIHJldHVybiB7CiAgICAgIHRvdGFsUGFnZTogMCwKICAgICAgY3VycmVudFBhZ2U6IDAsCiAgICAgIHJldmlld3M6IFtdCiAgICB9CiAgfSwKICBtb3VudGVkKCkgewogICAgbGV0IHNlbGYgPSB0aGlzCiAgICBzZWxmLmdldFJldmlld3MoMCkKICB9LAogIG1ldGhvZHM6IHsKICAgIGdldFJldmlld3MocGFnZSkgewogICAgICB0aGlzLmN1cnJlbnRQYWdlID0gcGFnZTsKICAgICAgbGV0IHBhcmFtcyA9IHsKICAgICAgICBwYWdlOiBwYWdlLAogICAgICAgIHNvcnRfY3JlYXRlZDogdGhpcy5zb3J0Q3JlYXRlZCwKICAgICAgfQoKICAgICAgcmYuZ2V0UmVxdWVzdCgnVXNlclJlcXVlc3QnKS5nZXRSZXZpZXdzKHBhcmFtcykudGhlbigocmVzKSA9PiB7CiAgICAgICAgdGhpcy5yZXZpZXdzID0gcmVzLmRhdGEuZGF0YXM7CiAgICAgICAgdGhpcy50b3RhbFBhZ2UgPSByZXMuZGF0YS50b3RhbF9wYWdlOwogICAgICB9KQogICAgfSwKICB9Cn0K"},{"version":3,"sources":["Reviews.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwCA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Reviews.vue","sourceRoot":"src/views/clients","sourcesContent":["<template>\n    <div class=\"content\">\n        <p class=\"title\">Reviews</p>\n\n        <div class=\"row list-content\">\n            <div class=\"col-md-12\">\n                <div class=\"table-responsive\">\n                    <table class=\"table table-striped custom-table\">\n                        <thead>\n                        <tr>\n                            <th>No.</th>\n                            <th>Provider</th>\n                            <th>Country</th>\n                            <th>Transaction Date</th>\n                            <th>Treatment</th>\n                            <th>Rating</th>\n                            <th>Action</th>\n                        </tr>\n                        </thead>\n                        <tbody>\n                        <tr v-for=\"review in reviews\" :key=\"review.id\">\n                            <td>{{ review.appointment_id | convertAppointmentID }}</td>\n                            <td>{{ review.clinic.name }}</td>\n                            <td>{{ review.clinic.country }}</td>\n                            <td>{{ review.created_at | convertTimeSecondToDate }}</td>\n                            <td>{{ review.rating }}</td>\n                        </tr>\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        </div>\n        <div class=\"page\">\n            <Pagination :total-page=\"totalPage\" :current-page=\"currentPage\"\n                        @pageData=\"getReviews\"></Pagination>\n        </div>\n    </div>\n</template>\n\n<script>\n  import rf from \"../../api/RequestFactory\";\n  import Pagination from \"../../common/Pagination\";\n\n  export default {\n    name: \"Review\",\n    components: {\n      Pagination\n    },\n    data() {\n      return {\n        totalPage: 0,\n        currentPage: 0,\n        reviews: []\n      }\n    },\n    mounted() {\n      let self = this\n      self.getReviews(0)\n    },\n    methods: {\n      getReviews(page) {\n        this.currentPage = page;\n        let params = {\n          page: page,\n          sort_created: this.sortCreated,\n        }\n\n        rf.getRequest('UserRequest').getReviews(params).then((res) => {\n          this.reviews = res.data.datas;\n          this.totalPage = res.data.total_page;\n        })\n      },\n    }\n  }\n</script>\n\n<style scoped>\n\n</style>"]}]}